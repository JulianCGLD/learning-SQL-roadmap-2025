Cuando en el resultado de una consulta se desea mostrar la información concatenada utilizamos la palabra CONCAT, 
y para crear una columna temporal en la cual se mostrarán los resultados concatenados 
usamos la cláusula AS, la cual nos permite definir un alias para almacenar los datos temporales.

--- CONCAT is to unite two or more columns in a single column in the result of a query
SELECT CONCAT(columna1,'separador',columna2) AS columna_temporal FROM nombre_tabla;
This fo MySQL 

SELECT CONCAT(nombre, ' ', apellido) AS empleados FROM empleado; --will show the full names of employees in a single column named "empleados".

-- Whe we want to show only one register as result is necessary to use WHERE clause
SELECT nombre_columnas 
FROM nombre_tablas 
WHERE condición;

- A question here ¿why select is alone? Because it means all columns

SELECT * 
FROM empleado
WHERE ci='123456789';

SELECT nombre, apellido 
FROM empleado --- This means that we use the table empleado and we want to show only the columns nombre and apellido
WHERE sexo !='M'; -- != means not equal


SELECT nombre, apellido
FROM empleado
WHERE sexo='F';

-- What is and? It is a logical operator that allows us to combine two or more conditions in the WHERE clause.
-- What is or? It is another logical operator that allows us to specify multiple conditions,


WHERE dno=dnumero --- what means dno? dno is a column in the table empleado


SELECT ci, nombre, apellido
FROM empleado, departamento
WHERE dno=dnumero
    dnombre='Administrativo' -- THere is something wrong here what is it? dnombre is not in the table empleado
Error Code: 1064. You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'dnombre='Administrativo'' at line 4 -- What i have to do?

SELECT ci, nombre, apellido
FROM empleado, departamento
WHERE dno=id_numero and
	id_nombre='administrativo'

-- was missing the (and) logical connector in WHERE statement

DISTINCT --- Why use this clause when the same register is repeated multiple times and we want to eliminate the duplicate values, (this applies only in one column)
DISTINCT --- Can be used with the functions SUM( ), COUNT(), AVG(), MAX(), MIN(), its no apllicable with MAX() and MIN() OR MIN() because it will return the same value

SELECT DISTINCT nombre_columna
FROM nombre_tabla; --This is the normal form

SELECT DISTINCT eci --- What is eci? It is a column in the table carga_f / what is select? It is a command to show data
FROM trabaja_en; --- What if from? It indicates the table where the column is located

SELECT eci
FROM trabaja_en

--- inquiries (consults) with null values
-- What is null? It is a special marker used in SQL to indicate that a data value does not exist in the database.
-- To check for null values we use the IS NULL or IS

SELECT nombre_columnas -- What is this? It is a command to show data
FROM nombre_tabla -- What is this? It indicates the table where the column is located
WHERE nombre_columna is NULL -- What is this? It is a condition to filter the results and show only the rows where the specified column has null values

SELECT ci, nombre, apellido, superci
FROM empleado
WHERE superci IS NULL; -- What is superci? It is a column in the table empleado /
-- What does do this query? It shows the ci, nombre, apellido, and superci of employees who do not have a supervisor (superci is null).
-- What is the function of where clause? It filters the results to include only those rows where the superci column is null.
-- What is the function of NULL here? It indicates the absence of a value in the superci column.

SELECT ci, nombre, apellido, superci
FROM empleado
WHERE superci IS NULL; 

-- This is the format for select null values
-- the format to select not null values is this

SELECT nombre_columnas
FROM nombre_tabla
WHERE nombre_columna IS NOT NULL;

--  Pattern Correspondence Test
-- What is the pattern correspondence test? It is a way to filter results based on specific patterns in string data.
-- The most common operator for this is LIKE, which allows us to use wildcards to match
-- The two main wildcards are:
-- % (percent sign): Represents zero or more characters. To realize a search replacing multiple positions in strings we use the following format
-- _ (underscore): Represents a single character. to realize a search replacing one or two postiions in strings we use the following format

SELECT nombre, apellido
FROM empleado
WHERE nombre LIKE '______'  -- 6 caracteres exactos
  AND apellido LIKE '%a%';  -- 'a' en cualquier parte


--- inquiries for date ranges 
--- SQL allows to make calculations with dates, such as finding records within a specific date range.
--- To filter records based on date ranges, we can use the BETWEEN operator or comparison operators like



SELECT nombre, apellido, jefe_fi
FROM empleado, departamento
WHERE jefeci=ci AND
    YEAR (jefe_fi) BETWEEN 1979 and 1983 -- What is year? It is a function that extracts the year from a date
--- What is BETWEEN? It is an operator that filters results within a specified range
--- What is the explanation of this operation?
--- It shows the nombre, apellido, and jefe_fi of employees who are also department heads (jefeci=ci) and whose jefe_fi year is between 1979 and 1983.

--- if we had a born date in the data base and we want to calculate the age of a person we can use this format
SELECT nombre, apellido, fecha_n,
    YEAR(CURDATE()) - YEAR(fecha_n) AS edad -- What is CURDATE()? It is a function that returns the current date
--- YEAR(CURDATE()) - YEAR(fecha_n) AS edad What happen here? It calculates the age by subtracting the year of birth (fecha_n) from the current year.

SELECT nombre, apellido, fecha_n,
    YEAR(CURDATE()) - YEAR(fecha_n) AS edad
FROM empleado;

--- inquiries using alias 
--- An alias is a temporary name given to a table or column for the duration of a query.
--- It is created using the AS keyword, although AS is optional.

SELECT departamento.id_numero, id_nombre,
FROM departamento; localizacion -- What is localizacion? It is an alias for the table departamento
WHERE departamento. id_numero = localizacion.id_numero AND -- Explain me this
--- What is this? It filters the results to include only those rows where the id_numero in the departamento table matches the id_numero in the localizacion alias.
    dep_loca = 'Cuenca';
--- What is dep_loca? It is a column in the table departamento

---The error was there was a comma after id_nombre that was not necessary
--- And was bad the place of localizacion

SELECT departamento.id_numero,id_nombre
FROM departamento, localizacion
WHERE departamento.id_numero = localizacion.id_numero
  AND dep_loca = 'Cuenca';

--consulting and renaming tables

---To consult information camps on in the same tablet is necessary to rename the tables
-- Also we can apply the same in every table, so that you do not have to write the entire name of the table.
SELECT nuevo_nombre_tabla.nombre_columna -- What is this? It indicates the column from the renamed table
FROM nombre_tabla nuevo_nombre_tabla -- What is this? It renames the original table to a new name for easier reference
WHERE condición; -- What is this? It filters the results based on a specified condition

SELECT e.ci, e.nombre, e.apellido, s.ci, s.nombre, s.apellido --- explain me this 
FROM empleado e, empleado s
WHERE e.superci=s.ci;
--- What is e and s? They are aliases for the empleado table, allowing us to differentiate between employees (e) and their supervisors (s).
--- What is e.superci=s.ci? It matches employees with their supervisors by comparing the superci of employees (e) with the ci of supervisors (s).
--- What is the result of this query? It shows the ci, nombre, and apellido of employees along with the ci, nombre, and apellido of their respective supervisors.

